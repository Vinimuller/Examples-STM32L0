
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000290  08000298  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000290  08000290  00010298  2**0
                  CONTENTS
  4 .ARM          00000000  08000290  08000290  00010298  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000290  08000298  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000290  08000290  00010290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000294  08000294  00010294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000298  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000298  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000df7  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000466  00000000  00000000  000110b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  00011520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  000116c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b5fb  00000000  00000000  00011828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b42  00000000  00000000  0001ce23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006bbd5  00000000  00000000  0001e965  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008a53a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000478  00000000  00000000  0008a5b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000278 	.word	0x08000278

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000278 	.word	0x08000278

08000108 <main>:
#include "stm32l053xx.h"

int main (void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0

	return 0;
 800010c:	2300      	movs	r3, #0
}
 800010e:	0018      	movs	r0, r3
 8000110:	46bd      	mov	sp, r7
 8000112:	bd80      	pop	{r7, pc}

08000114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000114:	b580      	push	{r7, lr}
 8000116:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000118:	46c0      	nop			; (mov r8, r8)
 800011a:	46bd      	mov	sp, r7
 800011c:	bd80      	pop	{r7, pc}

0800011e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800011e:	b580      	push	{r7, lr}
 8000120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000122:	e7fe      	b.n	8000122 <HardFault_Handler+0x4>

08000124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000124:	b580      	push	{r7, lr}
 8000126:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000128:	46c0      	nop			; (mov r8, r8)
 800012a:	46bd      	mov	sp, r7
 800012c:	bd80      	pop	{r7, pc}

0800012e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800012e:	b580      	push	{r7, lr}
 8000130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000132:	46c0      	nop			; (mov r8, r8)
 8000134:	46bd      	mov	sp, r7
 8000136:	bd80      	pop	{r7, pc}

08000138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000138:	b580      	push	{r7, lr}
 800013a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800013c:	f000 f86c 	bl	8000218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000140:	46c0      	nop			; (mov r8, r8)
 8000142:	46bd      	mov	sp, r7
 8000144:	bd80      	pop	{r7, pc}
	...

08000148 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000148:	b580      	push	{r7, lr}
 800014a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800014c:	4b17      	ldr	r3, [pc, #92]	; (80001ac <SystemInit+0x64>)
 800014e:	681a      	ldr	r2, [r3, #0]
 8000150:	4b16      	ldr	r3, [pc, #88]	; (80001ac <SystemInit+0x64>)
 8000152:	2180      	movs	r1, #128	; 0x80
 8000154:	0049      	lsls	r1, r1, #1
 8000156:	430a      	orrs	r2, r1
 8000158:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800015a:	4b14      	ldr	r3, [pc, #80]	; (80001ac <SystemInit+0x64>)
 800015c:	68da      	ldr	r2, [r3, #12]
 800015e:	4b13      	ldr	r3, [pc, #76]	; (80001ac <SystemInit+0x64>)
 8000160:	4913      	ldr	r1, [pc, #76]	; (80001b0 <SystemInit+0x68>)
 8000162:	400a      	ands	r2, r1
 8000164:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000166:	4b11      	ldr	r3, [pc, #68]	; (80001ac <SystemInit+0x64>)
 8000168:	681a      	ldr	r2, [r3, #0]
 800016a:	4b10      	ldr	r3, [pc, #64]	; (80001ac <SystemInit+0x64>)
 800016c:	4911      	ldr	r1, [pc, #68]	; (80001b4 <SystemInit+0x6c>)
 800016e:	400a      	ands	r2, r1
 8000170:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <SystemInit+0x64>)
 8000174:	689a      	ldr	r2, [r3, #8]
 8000176:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <SystemInit+0x64>)
 8000178:	2101      	movs	r1, #1
 800017a:	438a      	bics	r2, r1
 800017c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800017e:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <SystemInit+0x64>)
 8000180:	681a      	ldr	r2, [r3, #0]
 8000182:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <SystemInit+0x64>)
 8000184:	490c      	ldr	r1, [pc, #48]	; (80001b8 <SystemInit+0x70>)
 8000186:	400a      	ands	r2, r1
 8000188:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800018a:	4b08      	ldr	r3, [pc, #32]	; (80001ac <SystemInit+0x64>)
 800018c:	68da      	ldr	r2, [r3, #12]
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <SystemInit+0x64>)
 8000190:	490a      	ldr	r1, [pc, #40]	; (80001bc <SystemInit+0x74>)
 8000192:	400a      	ands	r2, r1
 8000194:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000196:	4b05      	ldr	r3, [pc, #20]	; (80001ac <SystemInit+0x64>)
 8000198:	2200      	movs	r2, #0
 800019a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <SystemInit+0x78>)
 800019e:	2280      	movs	r2, #128	; 0x80
 80001a0:	0512      	lsls	r2, r2, #20
 80001a2:	609a      	str	r2, [r3, #8]
#endif
}
 80001a4:	46c0      	nop			; (mov r8, r8)
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	40021000 	.word	0x40021000
 80001b0:	88ff400c 	.word	0x88ff400c
 80001b4:	fef6fff6 	.word	0xfef6fff6
 80001b8:	fffbffff 	.word	0xfffbffff
 80001bc:	ff02ffff 	.word	0xff02ffff
 80001c0:	e000ed00 	.word	0xe000ed00

080001c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80001c4:	480d      	ldr	r0, [pc, #52]	; (80001fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80001c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001ca:	e003      	b.n	80001d4 <LoopCopyDataInit>

080001cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80001ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001d2:	3104      	adds	r1, #4

080001d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80001d4:	480b      	ldr	r0, [pc, #44]	; (8000204 <LoopForever+0xa>)
  ldr  r3, =_edata
 80001d6:	4b0c      	ldr	r3, [pc, #48]	; (8000208 <LoopForever+0xe>)
  adds  r2, r0, r1
 80001d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001dc:	d3f6      	bcc.n	80001cc <CopyDataInit>
  ldr  r2, =_sbss
 80001de:	4a0b      	ldr	r2, [pc, #44]	; (800020c <LoopForever+0x12>)
  b  LoopFillZerobss
 80001e0:	e002      	b.n	80001e8 <LoopFillZerobss>

080001e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80001e2:	2300      	movs	r3, #0
  str  r3, [r2]
 80001e4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001e6:	3204      	adds	r2, #4

080001e8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <LoopForever+0x16>)
  cmp  r2, r3
 80001ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001ec:	d3f9      	bcc.n	80001e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001ee:	f7ff ffab 	bl	8000148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f2:	f000 f81d 	bl	8000230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80001f6:	f7ff ff87 	bl	8000108 <main>

080001fa <LoopForever>:

LoopForever:
    b LoopForever
 80001fa:	e7fe      	b.n	80001fa <LoopForever>
  ldr   r0, =_estack
 80001fc:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000200:	08000298 	.word	0x08000298
  ldr  r0, =_sdata
 8000204:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000208:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 800020c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000210:	20000020 	.word	0x20000020

08000214 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000214:	e7fe      	b.n	8000214 <ADC1_COMP_IRQHandler>
	...

08000218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  uwTick++;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <HAL_IncTick+0x14>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	1c5a      	adds	r2, r3, #1
 8000222:	4b02      	ldr	r3, [pc, #8]	; (800022c <HAL_IncTick+0x14>)
 8000224:	601a      	str	r2, [r3, #0]
}
 8000226:	46c0      	nop			; (mov r8, r8)
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	2000001c 	.word	0x2000001c

08000230 <__libc_init_array>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2600      	movs	r6, #0
 8000234:	4d0c      	ldr	r5, [pc, #48]	; (8000268 <__libc_init_array+0x38>)
 8000236:	4c0d      	ldr	r4, [pc, #52]	; (800026c <__libc_init_array+0x3c>)
 8000238:	1b64      	subs	r4, r4, r5
 800023a:	10a4      	asrs	r4, r4, #2
 800023c:	42a6      	cmp	r6, r4
 800023e:	d109      	bne.n	8000254 <__libc_init_array+0x24>
 8000240:	2600      	movs	r6, #0
 8000242:	f000 f819 	bl	8000278 <_init>
 8000246:	4d0a      	ldr	r5, [pc, #40]	; (8000270 <__libc_init_array+0x40>)
 8000248:	4c0a      	ldr	r4, [pc, #40]	; (8000274 <__libc_init_array+0x44>)
 800024a:	1b64      	subs	r4, r4, r5
 800024c:	10a4      	asrs	r4, r4, #2
 800024e:	42a6      	cmp	r6, r4
 8000250:	d105      	bne.n	800025e <__libc_init_array+0x2e>
 8000252:	bd70      	pop	{r4, r5, r6, pc}
 8000254:	00b3      	lsls	r3, r6, #2
 8000256:	58eb      	ldr	r3, [r5, r3]
 8000258:	4798      	blx	r3
 800025a:	3601      	adds	r6, #1
 800025c:	e7ee      	b.n	800023c <__libc_init_array+0xc>
 800025e:	00b3      	lsls	r3, r6, #2
 8000260:	58eb      	ldr	r3, [r5, r3]
 8000262:	4798      	blx	r3
 8000264:	3601      	adds	r6, #1
 8000266:	e7f2      	b.n	800024e <__libc_init_array+0x1e>
 8000268:	08000290 	.word	0x08000290
 800026c:	08000290 	.word	0x08000290
 8000270:	08000290 	.word	0x08000290
 8000274:	08000294 	.word	0x08000294

08000278 <_init>:
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027e:	bc08      	pop	{r3}
 8000280:	469e      	mov	lr, r3
 8000282:	4770      	bx	lr

08000284 <_fini>:
 8000284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028a:	bc08      	pop	{r3}
 800028c:	469e      	mov	lr, r3
 800028e:	4770      	bx	lr
